import tkinter as tk
# we used messagesboxes to let the user know what happened
from tkinter import messagebox
import random
from words import words

#randomizes a word from the import file (Isaac)
word_to_guess = random.choice(words)
guessed_letters = []
attempts = 6

#Create a window (Linda)
window = tk.Tk()
window.title("Hangman")
welcome = tk.Label(window, text="Welcome to Hangman! \n Guess The Words! HAVE FUN!", bg="Cornflowerblue", font=("Times New Roman",20), fg="black")
welcome.pack()
window.configure(bg="cornflowerblue")


# function to check if the game is over
def game_over():
    return win() or loss()

# function to check if the player has won
def win():
    return all(letter in guessed_letters for letter in word_to_guess)

# function to check if the player has lost 
def loss():
    return attempts == 0

# funtion for letter guesses (Esmeralda)
def guess_letter():
    global attempts
    letter = letter_entry.get().lower()
    if letter.isalpha() and len(letter) == 1:
        if letter in guessed_letters:
            messagebox.showinfo("Hangman", f"You've already guessed '{letter}'")
        elif letter in word_to_guess:
            guessed_letters.append(letter)
            update_word_display()
            if win():
                messagebox.showinfo("WOOHOO!", "Congratulations! You Won!")
                reset_game()
        else:
            guessed_letters.append(letter)
            attempts -= 1
            update_attempts_display()
            draw_hangman()
            if loss():
                messagebox.showinfo("WOMP WOMP...", "You Lose! The word was: " + word_to_guess) 
                reset_game()
        letter_entry.delete(0, tk.END)
    else:
        messagebox.showinfo("Hangman", "Please enter a single letter")

# function to reset the game once the player lost
def reset_game():
    global word_to_guess, guessed_letters, attempts
    word_to_guess = random.choice(words)
    guessed_letters = []
    attempts = 6
    update_word_display()
    update_attempts_display()
    draw_hangman()

# function to update the word display
def update_word_display():
    display_word = ""
    for letter in word_to_guess:
        if letter in guessed_letters:
            display_word += letter
        else:
            display_word += "_"
        display_word += "_"       
    word_label.config(text=display_word)

def update_attempts_display():
    attempts_label.config(text=f"Attempts left: {attempts}")   

# We got help from my brother since the images were not showing up on the GUI
def draw_hangman():
  canvas.delete("hangman")
  # we used create_rectangle to make the head look funny (like a Minecraft character)
  if attempts < 6:
    canvas.create_rectangle(125, 125, 175, 175, width=4, tags="hangman") #head
  if attempts < 5:
    canvas.create_line(150, 175, 150, 225, width=4, tags="hangman") #body
  if attempts < 4:
    canvas.create_line(150, 200, 125, 175, width=4, tags="hangman") #left arm
  if attempts < 3:
    canvas.create_line(150, 200, 175, 175, width=4, tags="hangman") #right arm
  if attempts < 2:
    canvas.create_line(150, 225, 125, 250, width=4, tags="hangman") #left leg
  if attempts < 1:
    canvas.create_line(150, 225, 175, 250, width=4, tags="hangman") #right leg

# GUI elements (Everyone)
word_label = tk.Label(window, text="",bg=("cornflowerblue"), font=("Times New Roman", 24))
attempts_label = tk.Label(window,bg=("red"),text="", font=("Times New Roman", 16))
letter_entry = tk.Entry(window,bg=("white"), width=5, font=("Times New Roman", 16))
guess_button = tk.Button(window,text="Guess", command=guess_letter, bg=("cornflowerblue"))
reset_button = tk.Button(window, text="Reset", command=reset_game, bg=("cornflowerblue"))
canvas = tk.Canvas(window, width=300, height=300)
canvas.create_line(50, 250, 250, 250, width=4) 
canvas.create_line(200, 250, 200, 100, width=4)
canvas.create_line(100, 100, 200, 100, width=4)
canvas.create_line(150, 100, 150, 120, width=4)
canvas.pack()

# we packed the GUI elements in the GUI
word_label.pack()
attempts_label.pack()
letter_entry.pack()
guess_button.pack()
reset_button.pack()

update_word_display()
update_attempts_display()
draw_hangman()

# we looped the program so the game could run
window.mainloop()
